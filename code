import pygame
import sys
import random
from pygame.locals import *
import heapq

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Directions
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Grid Settings
GRID_SIZE = 20
GRID_WIDTH = 25
GRID_HEIGHT = 25

# Initialize Pygame
pygame.init()

# Set up the display
WINDOW_WIDTH = GRID_SIZE * GRID_WIDTH
WINDOW_HEIGHT = GRID_SIZE * GRID_HEIGHT
DISPLAYSURF = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption('Snake Game')

# Clock
FPS = 6
fpsClock = pygame.time.Clock()

# Fonts
FONT = pygame.font.Font(None, 36)

# Snake
class Snake:
    def __init__(self):
        self.body = [(10, 10), (9, 10)]
        self.direction = RIGHT

    def move(self, direction):
        if direction == UP:
            self.direction = UP
        elif direction == DOWN:
            self.direction = DOWN
        elif direction == LEFT:
            self.direction = LEFT
        elif direction == RIGHT:
            self.direction = RIGHT

        if self.direction == UP:
            self.body.insert(0, (self.body[0][0], self.body[0][1] - 1))
        elif self.direction == DOWN:
            self.body.insert(0, (self.body[0][0], self.body[0][1] + 1))
        elif self.direction == LEFT:
            self.body.insert(0, (self.body[0][0] - 1, self.body[0][1]))
        elif self.direction == RIGHT:
            self.body.insert(0, (self.body[0][0] + 1, self.body[0][1]))

    def draw(self):
        for segment in self.body:
            pygame.draw.rect(DISPLAYSURF, GREEN, (segment[0] * GRID_SIZE, segment[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))

    def is_collision(self):
        if self.body[0] in self.body[1:]:
            return True
        return False

# Food
class Food:
    def __init__(self):
        self.position = (random.randint(0, GRID_WIDTH - 1), random.randint(0, GRID_HEIGHT - 1))

    def draw(self):
        pygame.draw.rect(DISPLAYSURF, RED, (self.position[0] * GRID_SIZE, self.position[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE))

# A* Algorithm
class AStar:
    def __init__(self, start, end, obstacles):
        self.start = start
        self.end = end
        self.obstacles = obstacles

    def heuristic(self, a, b):
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    def get_neighbors(self, node):
        neighbors = []
        for direction in [UP, DOWN, LEFT, RIGHT]:
            neighbor = (node[0] + direction[0], node[1] + direction[1])
            if 0 <= neighbor[0] < GRID_WIDTH and 0 <= neighbor[1] < GRID_HEIGHT:
                if neighbor not in self.obstacles:
                    neighbors.append(neighbor)
        return neighbors

    def a_star(self):
        open_list = []
        closed_set = set()
        heapq.heappush(open_list, (0, self.start))
        came_from = {}

        g_score = {self.start: 0}
        f_score = {self.start: self.heuristic(self.start, self.end)}

        while open_list:
            current = heapq.heappop(open_list)[1]

            if current == self.end:
                path = []
                while current in came_from:
                    path.append(current)
                    current = came_from[current]
                path.append(self.start)
                return path[::-1]

            closed_set.add(current)

            for neighbor in self.get_neighbors(current):
                tentative_g_score = g_score[current] + 1
                if neighbor in closed_set and tentative_g_score >= g_score.get(neighbor, 0):
                    continue
                if tentative_g_score < g_score.get(neighbor, 0) or neighbor not in [i[1] for i in open_list]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + self.heuristic(neighbor, self.end)
                    heapq.heappush(open_list, (f_score[neighbor], neighbor))
        return None

# Main function
def main():
    snake = Snake()
    food = Food()

    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

        # A* Algorithm to find the next move
        astar = AStar(snake.body[0], food.position, snake.body)
        path = astar.a_star()

        # Move snake based on the next move from A*
        if path and len(path) > 1:
            next_move = path[1]
            x_diff = next_move[0] - snake.body[0][0]
            y_diff = next_move[1] - snake.body[0][1]
            if x_diff == 1:
                snake.move(RIGHT)
            elif x_diff == -1:
                snake.move(LEFT)
            elif y_diff == 1:
                snake.move(DOWN)
            elif y_diff == -1:
                snake.move(UP)

        # Move snake automatically if no path found (should not happen)
        else:
            snake.move(snake.direction)

        # Collision detection
        if snake.body[0] == food.position:
            food = Food()
        else:
            snake.body.pop()

        # Draw everything
        DISPLAYSURF.fill(BLACK)
        snake.draw()
        food.draw()
        pygame.display.update()
        fpsClock.tick(FPS)

if __name__ == '__main__':
    main()
